[tox]
envlist = py27,py37,pep8,cover
minversion = 2.7
skipsdist = True

[testenv]
usedevelop = True
setenv = VIRTUAL_ENV={envdir}
         OS_TEST_PATH=monasca_log_api/tests
passenv = *_proxy
          *_PROXY
whitelist_externals = bash
                      find
                      rm
install_command = pip install {opts} {packages}
deps =
  -c{env:UPPER_CONSTRAINTS_FILE:https://releases.openstack.org/constraints/upper/train}
  -r{toxinidir}/test-requirements.txt
  -r{toxinidir}/requirements.txt
commands =
  find ./ -type f -name '*.pyc' -delete
  stestr run {posargs}

[testenv:cover]
description = Calculates code coverage
basepython = python3
setenv =
    PYTHON=coverage run --source monasca_log_api --parallel-mode
commands =
  stestr run {posargs}
  coverage combine
  coverage html -d cover
  coverage xml -o cover/coverage.xml

[testenv:debug]
basepython = python3
description = Allows to run unit-test with debug mode enabled
commands =
  oslo_debug_helper -t {toxinidir}/monasca_log_api/tests {posargs}

[testenv:bashate]
basepython = python3
description = Validates (pep8-like) devstack plugins
skip_install = True
usedevelop = False
commands = bash {toxinidir}/tools/bashate.sh {toxinidir}/devstack

[testenv:bandit]
basepython = python3
description = Validates codebase with bandit
skip_install = True
usedevelop = False
commands =
  # FIXME(dmllr); B101 needs to be fixed first
  bandit -r monasca_log_api -n5 -s B101 -x monasca_log_api/tests

[testenv:pep8]
basepython = python3
description = Runs set of linters against codebase (flake8, bandit, bashate, checkniceness)
commands =
  {[testenv:flake8]commands}
  {[testenv:bandit]commands}
  {[testenv:bashate]commands}
  {[testenv:checkniceness]commands}

[testenv:flake8]
basepython = python3
description = Validates codebase with flake
commands =
  flake8 monasca_log_api

[testenv:genconfig]
basepython = python3
description = Generates sample documentation file for monasca-log-api
commands = oslo-config-generator --config-file=config-generator/monasca-log-api.conf

[testenv:genpolicy]
basepython = python3
description = Generates sample policy.json file for monasca-log-api
commands = oslopolicy-sample-generator --config-file=config-generator/policy.conf

[testenv:docs]
basepython = python3
description = Builds main documention
commands =
  {[testenv:devdocs]commands}

[testenv:api-guide]
basepython = python3
description = Called from CI scripts to test and publish the API Guide
commands =
  rm -rf api-guide/build
  {[testenv:checkjson]commands}
  sphinx-build -W -b html -d api-guide/build/doctrees api-guide/source api-guide/build/html

[testenv:api-ref]
basepython = python3
description = Called from CI scripts to test and publish the API Ref
commands =
  rm -rf api-ref/build
  {[testenv:checkjson]commands}
  sphinx-build -W -b html -d api-ref/build/doctrees api-ref/source api-ref/build/html

[testenv:releasenotes]
basepython = python3
description = Called from CI script to test and publish the Release Notes
commands =
  rm -rf releasenotes/build
  sphinx-build -a -E -W -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[testenv:all-docs]
basepython = python3
description = Builds all docouments
commands =
  {[testenv:devdocs]commands}
  {[testenv:api-guide]commands}
  {[testenv:api-ref]commands}
  {[testenv:releasenotes]commands}

[testenv:devdocs]
basepython = python3
description = Builds developer documentation
commands =
  rm -rf doc/build
  rm -rf doc/source/contributor/api
  {[testenv:checkjson]commands}
  python setup.py build_sphinx

[testenv:checkniceness]
basepython = python3
description = Validates (pep-like) documenation
skip_install = True
usedevelop = False
commands =
  doc8 --file-encoding utf-8 {toxinidir}/doc
  doc8 --file-encoding utf-8 {toxinidir}/api-ref
  doc8 --file-encoding utf-8 {toxinidir}/api-guide
  doc8 --file-encoding utf-8 {toxinidir}/releasenotes

[testenv:checkjson]
basepython = python3
description = Validates all json samples inside doc folder
skip_install = True
usedevelop = False
deps =
whitelist_externals =
    bash
    python
    find
    rm
commands =
  bash -c "! find doc/ -type f -name *.json | xargs grep -U -n $'\r'"
  bash -c '! find doc/ -type f -name *.json | xargs -t -n1 python -m json.tool 2>&1 > /dev/null | grep -B1 -v ^python'

[testenv:venv]
basepython = python3
commands = {posargs}

[flake8]
max-line-length = 100
exclude = .git,.tox,dist,doc,api-ref,api-guide,releasenotes,documentation,*.egg,build
show-source = True
enable-extensions = H203,H106

[hacking]
import_exceptions =
  six.moves

[testenv:lower-constraints]
basepython = python3
deps =
  -c{toxinidir}/lower-constraints.txt
  -r{toxinidir}/test-requirements.txt
  -r{toxinidir}/requirements.txt
